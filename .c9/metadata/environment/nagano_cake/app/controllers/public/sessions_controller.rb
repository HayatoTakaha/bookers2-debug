{"filter":false,"title":"sessions_controller.rb","tooltip":"/nagano_cake/app/controllers/public/sessions_controller.rb","undoManager":{"mark":16,"position":16,"stack":[[{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"insert","lines":[" "],"id":1,"ignore":true},{"start":{"row":4,"column":0},"end":{"row":5,"column":0},"action":"remove","lines":["  before_action :configure_permitted_parameters, if: :devise_controller?",""]},{"start":{"row":6,"column":1},"end":{"row":6,"column":3},"action":"remove","lines":[" #"]},{"start":{"row":11,"column":1},"end":{"row":11,"column":3},"action":"remove","lines":[" #"]},{"start":{"row":16,"column":1},"end":{"row":16,"column":3},"action":"remove","lines":[" #"]},{"start":{"row":24,"column":4},"end":{"row":24,"column":8},"action":"remove","lines":["cust"]},{"start":{"row":24,"column":4},"end":{"row":24,"column":12},"action":"insert","lines":["public_h"]},{"start":{"row":24,"column":15},"end":{"row":24,"column":16},"action":"remove","lines":["r"]},{"start":{"row":24,"column":17},"end":{"row":24,"column":24},"action":"remove","lines":["my_page"]},{"start":{"row":24,"column":17},"end":{"row":24,"column":20},"action":"insert","lines":["top"]},{"start":{"row":28,"column":4},"end":{"row":28,"column":8},"action":"remove","lines":["root"]},{"start":{"row":28,"column":4},"end":{"row":28,"column":20},"action":"insert","lines":["public_homes_top"]},{"start":{"row":41,"column":37},"end":{"row":41,"column":41},"action":"remove","lines":["fals"]},{"start":{"row":41,"column":37},"end":{"row":41,"column":41},"action":"insert","lines":[" tru"]},{"start":{"row":44,"column":0},"end":{"row":45,"column":0},"action":"insert","lines":["",""]},{"start":{"row":45,"column":2},"end":{"row":46,"column":3},"action":"remove","lines":["protected ","   "]},{"start":{"row":45,"column":2},"end":{"row":46,"column":0},"action":"insert","lines":["# If you have extra params to permit, append them to the sanitizer.",""]},{"start":{"row":46,"column":2},"end":{"row":46,"column":3},"action":"insert","lines":["#"]},{"start":{"row":46,"column":18},"end":{"row":46,"column":27},"action":"remove","lines":["permitted"]},{"start":{"row":46,"column":18},"end":{"row":46,"column":25},"action":"insert","lines":["sign_in"]},{"start":{"row":46,"column":31},"end":{"row":46,"column":35},"action":"remove","lines":["eter"]},{"start":{"row":47,"column":1},"end":{"row":47,"column":3},"action":"insert","lines":[" #"]},{"start":{"row":47,"column":46},"end":{"row":47,"column":48},"action":"remove","lines":["up"]},{"start":{"row":47,"column":46},"end":{"row":47,"column":48},"action":"insert","lines":["in"]},{"start":{"row":47,"column":57},"end":{"row":50,"column":4},"action":"remove","lines":["","      :first_name, :last_name, :first_name_kana, :last_name_kana, ","      :postal_code, :address, :telephone_number, :email, :password, :password_confirmation","    "]},{"start":{"row":47,"column":57},"end":{"row":47,"column":67},"action":"insert","lines":[":attribute"]},{"start":{"row":48,"column":2},"end":{"row":48,"column":5},"action":"remove","lines":["   "]},{"start":{"row":48,"column":2},"end":{"row":48,"column":3},"action":"insert","lines":["#"]},{"start":{"row":49,"column":3},"end":{"row":49,"column":6},"action":"remove","lines":["   "]},{"start":{"row":49,"column":3},"end":{"row":50,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"remove","lines":[" "],"id":2,"ignore":true},{"start":{"row":4,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["  before_action :configure_permitted_parameters, if: :devise_controller?",""]},{"start":{"row":7,"column":1},"end":{"row":7,"column":3},"action":"insert","lines":[" #"]},{"start":{"row":12,"column":1},"end":{"row":12,"column":3},"action":"insert","lines":[" #"]},{"start":{"row":17,"column":1},"end":{"row":17,"column":3},"action":"insert","lines":[" #"]},{"start":{"row":25,"column":4},"end":{"row":25,"column":12},"action":"remove","lines":["public_h"]},{"start":{"row":25,"column":4},"end":{"row":25,"column":8},"action":"insert","lines":["cust"]},{"start":{"row":25,"column":11},"end":{"row":25,"column":12},"action":"insert","lines":["r"]},{"start":{"row":25,"column":14},"end":{"row":25,"column":17},"action":"remove","lines":["top"]},{"start":{"row":25,"column":14},"end":{"row":25,"column":21},"action":"insert","lines":["my_page"]},{"start":{"row":29,"column":4},"end":{"row":29,"column":20},"action":"remove","lines":["public_homes_top"]},{"start":{"row":29,"column":4},"end":{"row":29,"column":8},"action":"insert","lines":["root"]},{"start":{"row":42,"column":37},"end":{"row":42,"column":41},"action":"remove","lines":[" tru"]},{"start":{"row":42,"column":37},"end":{"row":42,"column":41},"action":"insert","lines":["fals"]},{"start":{"row":45,"column":0},"end":{"row":46,"column":0},"action":"remove","lines":["",""]},{"start":{"row":45,"column":2},"end":{"row":46,"column":0},"action":"remove","lines":["# If you have extra params to permit, append them to the sanitizer.",""]},{"start":{"row":45,"column":2},"end":{"row":46,"column":3},"action":"insert","lines":["protected ","   "]},{"start":{"row":46,"column":5},"end":{"row":46,"column":6},"action":"remove","lines":["#"]},{"start":{"row":46,"column":20},"end":{"row":46,"column":27},"action":"remove","lines":["sign_in"]},{"start":{"row":46,"column":20},"end":{"row":46,"column":29},"action":"insert","lines":["permitted"]},{"start":{"row":46,"column":35},"end":{"row":46,"column":39},"action":"insert","lines":["eter"]},{"start":{"row":47,"column":1},"end":{"row":47,"column":3},"action":"remove","lines":[" #"]},{"start":{"row":47,"column":44},"end":{"row":47,"column":46},"action":"remove","lines":["in"]},{"start":{"row":47,"column":44},"end":{"row":47,"column":46},"action":"insert","lines":["up"]},{"start":{"row":47,"column":55},"end":{"row":47,"column":65},"action":"remove","lines":[":attribute"]},{"start":{"row":47,"column":55},"end":{"row":50,"column":4},"action":"insert","lines":["","      :first_name, :last_name, :first_name_kana, :last_name_kana, ","      :postal_code, :address, :telephone_number, :email, :password, :password_confirmation","    "]},{"start":{"row":51,"column":2},"end":{"row":51,"column":3},"action":"insert","lines":[" "]},{"start":{"row":51,"column":3},"end":{"row":51,"column":4},"action":"remove","lines":["#"]},{"start":{"row":51,"column":3},"end":{"row":51,"column":5},"action":"insert","lines":["  "]},{"start":{"row":52,"column":3},"end":{"row":53,"column":0},"action":"remove","lines":["",""]},{"start":{"row":52,"column":3},"end":{"row":52,"column":6},"action":"insert","lines":["   "]}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"remove","lines":[" before_action :customer_state, only: [:create]",""],"id":3,"ignore":true},{"start":{"row":4,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["  before_action :customer_state, only: [:create]",""]},{"start":{"row":25,"column":12},"end":{"row":25,"column":13},"action":"remove","lines":["s"]},{"start":{"row":42,"column":37},"end":{"row":42,"column":38},"action":"insert","lines":[" "]},{"start":{"row":45,"column":0},"end":{"row":46,"column":0},"action":"insert","lines":["  ",""]},{"start":{"row":47,"column":2},"end":{"row":48,"column":0},"action":"insert","lines":["",""]},{"start":{"row":53,"column":0},"end":{"row":53,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":[" before_action :customer_state, only: [:create]",""],"id":4,"ignore":true},{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"remove","lines":["  before_action :customer_state, only: [:create]",""]},{"start":{"row":25,"column":12},"end":{"row":25,"column":13},"action":"insert","lines":["s"]},{"start":{"row":42,"column":37},"end":{"row":42,"column":38},"action":"remove","lines":[" "]},{"start":{"row":45,"column":0},"end":{"row":46,"column":0},"action":"remove","lines":["  ",""]},{"start":{"row":46,"column":2},"end":{"row":47,"column":0},"action":"remove","lines":["",""]},{"start":{"row":51,"column":0},"end":{"row":51,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"remove","lines":[" before_action :customer_state, only: [:create]",""],"id":5,"ignore":true},{"start":{"row":4,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["  before_action :customer_state, only: [:create]",""]},{"start":{"row":25,"column":12},"end":{"row":25,"column":13},"action":"remove","lines":["s"]},{"start":{"row":42,"column":37},"end":{"row":42,"column":38},"action":"insert","lines":[" "]},{"start":{"row":45,"column":0},"end":{"row":46,"column":0},"action":"insert","lines":["  ",""]},{"start":{"row":47,"column":2},"end":{"row":48,"column":0},"action":"insert","lines":["",""]},{"start":{"row":53,"column":0},"end":{"row":53,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":0,"column":0},"end":{"row":54,"column":6},"action":"remove","lines":["# frozen_string_literal: true","","class Public::SessionsController < Devise::SessionsController","  before_action :configure_permitted_parameters, if: :devise_controller?","  before_action :customer_state, only: [:create]","  # before_action :configure_sign_in_params, only: [:create]","","  # GET /resource/sign_in","  def new","    super","  end","","  # POST /resource/sign_in","  def create","    super","  end","","  # DELETE /resource/sign_out","  def destroy","    super","  end","","  protected","  ","  def after_sign_in_path_for(resource)","    customer_my_page_path","  end","  ","  def after_sign_out_path_for(resource)","    root_path","  end","  ","  private","  # アクティブであるかを判断するメソッド","  def customer_state","  # 【処理内容1】 入力されたemailからアカウントを1件取得","  customer = Customer.find_by(email: params[:customer][:email])","  # 【処理内容2】 アカウントを取得できなかった場合、このメソッドを終了する","  return if customer.nil?","  # 【処理内容3】 取得したアカウントのパスワードと入力されたパスワードが一致していない場合、このメソッドを終了する","  return unless customer.valid_password?(params[:customer][:password])","  # 【処理内容4】 アクティブでない会員に対する処理","  return unless customer.is_active == false","  redirect_to new_customer_registration_path","  end","  ","  protected ","  ","    def configure_permitted_parameters","    devise_parameter_sanitizer.permit(:sign_up, keys: [","      :first_name, :last_name, :first_name_kana, :last_name_kana, ","      :postal_code, :address, :telephone_number, :email, :password, :password_confirmation","    ])","    end","end   "],"id":6}],[{"start":{"row":0,"column":0},"end":{"row":54,"column":0},"action":"insert","lines":["# frozen_string_literal: true","","class Public::SessionsController < Devise::SessionsController","  before_action :configure_permitted_parameters, if: :devise_controller?","  before_action :customer_state, only: [:create]","  # before_action :configure_sign_in_params, only: [:create]","","  # GET /resource/sign_in","  def new","    super","  end","","  # POST /resource/sign_in","  def create","    super","  end","","  # DELETE /resource/sign_out","  def destroy","    super","  end","","  protected","  ","  def after_sign_in_path_for(resource)","    my_page_customer_path","  end","  ","  def after_sign_out_path_for(resource)","    root_path","  end","  ","  private","  # アクティブであるかを判断するメソッド","  def customer_state","    # 【処理内容1】 入力されたemailからアカウントを1件取得","    customer = Customer.find_by(email: params[:customer][:email])","    # 【処理内容2】 アカウントを取得できなかった場合、このメソッドを終了する","    return if customer.nil?","    # 【処理内容3】 取得したアカウントのパスワードと入力されたパスワードが一致していない場合、このメソッドを終了する","    return unless customer.valid_password?(params[:customer][:password])","    # 【処理内容4】 アクティブでない会員に対する処理","    if customer.is_active == false","      redirect_to new_customer_registration_path","    end","  end","","  def configure_permitted_parameters","    devise_parameter_sanitizer.permit(:sign_up, keys: [","      :first_name, :last_name, :first_name_kana, :last_name_kana, ","      :postal_code, :address, :telephone_number, :email, :password, :password_confirmation","    ])","  end","end",""],"id":7}],[{"start":{"row":5,"column":2},"end":{"row":5,"column":3},"action":"remove","lines":["#"],"id":8},{"start":{"row":5,"column":0},"end":{"row":5,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":5,"column":0},"end":{"row":5,"column":1},"action":"insert","lines":[" "],"id":9}],[{"start":{"row":0,"column":0},"end":{"row":54,"column":0},"action":"remove","lines":["# frozen_string_literal: true","","class Public::SessionsController < Devise::SessionsController","  before_action :configure_permitted_parameters, if: :devise_controller?","  before_action :customer_state, only: [:create]","  before_action :configure_sign_in_params, only: [:create]","","  # GET /resource/sign_in","  def new","    super","  end","","  # POST /resource/sign_in","  def create","    super","  end","","  # DELETE /resource/sign_out","  def destroy","    super","  end","","  protected","  ","  def after_sign_in_path_for(resource)","    my_page_customer_path","  end","  ","  def after_sign_out_path_for(resource)","    root_path","  end","  ","  private","  # アクティブであるかを判断するメソッド","  def customer_state","    # 【処理内容1】 入力されたemailからアカウントを1件取得","    customer = Customer.find_by(email: params[:customer][:email])","    # 【処理内容2】 アカウントを取得できなかった場合、このメソッドを終了する","    return if customer.nil?","    # 【処理内容3】 取得したアカウントのパスワードと入力されたパスワードが一致していない場合、このメソッドを終了する","    return unless customer.valid_password?(params[:customer][:password])","    # 【処理内容4】 アクティブでない会員に対する処理","    if customer.is_active == false","      redirect_to new_customer_registration_path","    end","  end","","  def configure_permitted_parameters","    devise_parameter_sanitizer.permit(:sign_up, keys: [","      :first_name, :last_name, :first_name_kana, :last_name_kana, ","      :postal_code, :address, :telephone_number, :email, :password, :password_confirmation","    ])","  end","end",""],"id":10}],[{"start":{"row":0,"column":0},"end":{"row":54,"column":0},"action":"insert","lines":["# frozen_string_literal: true","","class Public::SessionsController < Devise::SessionsController","  before_action :configure_permitted_parameters, if: :devise_controller?","  before_action :customer_state, only: [:create]","  before_action :configure_sign_in_params, only: [:create]","","  # GET /resource/sign_in","  def new","    super","  end","","  # POST /resource/sign_in","  def create","    super","  end","","  # DELETE /resource/sign_out","  def destroy","    super","  end","","  protected","","  def after_sign_in_path_for(resource)","    my_page_customer_path","  end","","  def after_sign_out_path_for(resource)","    root_path","  end","","  private","  # アクティブであるかを判断するメソッド","  def customer_state","    # 【処理内容1】 入力されたemailからアカウントを1件取得","    customer = Customer.find_by(email: params[:customer][:email])","    # 【処理内容2】 アカウントを取得できなかった場合、このメソッドを終了する","    return if customer.nil?","    # 【処理内容3】 取得したアカウントのパスワードと入力されたパスワードが一致していない場合、このメソッドを終了する","    return unless customer.valid_password?(params[:customer][:password])","    # 【処理内容4】 アクティブでない会員に対する処理","    if customer.is_active == false","      redirect_to new_customer_registration_path","    end","  end","","  def configure_permitted_parameters","    devise_parameter_sanitizer.permit(:sign_up, keys: [","      :first_name, :last_name, :first_name_kana, :last_name_kana, ","      :postal_code, :address, :telephone_number, :email, :password, :password_confirmation","    ])","  end","end",""],"id":11}],[{"start":{"row":0,"column":0},"end":{"row":54,"column":0},"action":"remove","lines":["# frozen_string_literal: true","","class Public::SessionsController < Devise::SessionsController","  before_action :configure_permitted_parameters, if: :devise_controller?","  before_action :customer_state, only: [:create]","  before_action :configure_sign_in_params, only: [:create]","","  # GET /resource/sign_in","  def new","    super","  end","","  # POST /resource/sign_in","  def create","    super","  end","","  # DELETE /resource/sign_out","  def destroy","    super","  end","","  protected","","  def after_sign_in_path_for(resource)","    my_page_customer_path","  end","","  def after_sign_out_path_for(resource)","    root_path","  end","","  private","  # アクティブであるかを判断するメソッド","  def customer_state","    # 【処理内容1】 入力されたemailからアカウントを1件取得","    customer = Customer.find_by(email: params[:customer][:email])","    # 【処理内容2】 アカウントを取得できなかった場合、このメソッドを終了する","    return if customer.nil?","    # 【処理内容3】 取得したアカウントのパスワードと入力されたパスワードが一致していない場合、このメソッドを終了する","    return unless customer.valid_password?(params[:customer][:password])","    # 【処理内容4】 アクティブでない会員に対する処理","    if customer.is_active == false","      redirect_to new_customer_registration_path","    end","  end","","  def configure_permitted_parameters","    devise_parameter_sanitizer.permit(:sign_up, keys: [","      :first_name, :last_name, :first_name_kana, :last_name_kana, ","      :postal_code, :address, :telephone_number, :email, :password, :password_confirmation","    ])","  end","end",""],"id":15}],[{"start":{"row":0,"column":0},"end":{"row":56,"column":0},"action":"insert","lines":["# frozen_string_literal: true","","module Public","  class SessionsController < Devise::SessionsController","    before_action :configure_permitted_parameters, if: :devise_controller?","    before_action :customer_state, only: [:create]","    before_action :configure_sign_in_params, only: [:create]","","    # GET /resource/sign_in","    def new","      super","    end","","    # POST /resource/sign_in","    def create","      super","    end","","    # DELETE /resource/sign_out","    def destroy","      super","    end","","    protected","","    def after_sign_in_path_for(resource)","      my_page_customer_path","    end","","    def after_sign_out_path_for(resource)","      root_path","    end","","    private","    # アクティブであるかを判断するメソッド","    def customer_state","      # 【処理内容1】 入力されたemailからアカウントを1件取得","      customer = Customer.find_by(email: params[:customer][:email])","      # 【処理内容2】 アカウントを取得できなかった場合、このメソッドを終了する","      return if customer.nil?","      # 【処理内容3】 取得したアカウントのパスワードと入力されたパスワードが一致していない場合、このメソッドを終了する","      return unless customer.valid_password?(params[:customer][:password])","      # 【処理内容4】 アクティブでない会員に対する処理","      if customer.is_active == false","        redirect_to new_customer_registration_path","      end","    end","","    def configure_permitted_parameters","      devise_parameter_sanitizer.permit(:sign_up, keys: [","        :first_name, :last_name, :first_name_kana, :last_name_kana, ","        :postal_code, :address, :telephone_number, :email, :password, :password_confirmation","      ])","    end","  end","end",""],"id":16}],[{"start":{"row":50,"column":67},"end":{"row":50,"column":68},"action":"remove","lines":[" "],"id":17}],[{"start":{"row":0,"column":0},"end":{"row":56,"column":0},"action":"remove","lines":["# frozen_string_literal: true","","module Public","  class SessionsController < Devise::SessionsController","    before_action :configure_permitted_parameters, if: :devise_controller?","    before_action :customer_state, only: [:create]","    before_action :configure_sign_in_params, only: [:create]","","    # GET /resource/sign_in","    def new","      super","    end","","    # POST /resource/sign_in","    def create","      super","    end","","    # DELETE /resource/sign_out","    def destroy","      super","    end","","    protected","","    def after_sign_in_path_for(resource)","      my_page_customer_path","    end","","    def after_sign_out_path_for(resource)","      root_path","    end","","    private","    # アクティブであるかを判断するメソッド","    def customer_state","      # 【処理内容1】 入力されたemailからアカウントを1件取得","      customer = Customer.find_by(email: params[:customer][:email])","      # 【処理内容2】 アカウントを取得できなかった場合、このメソッドを終了する","      return if customer.nil?","      # 【処理内容3】 取得したアカウントのパスワードと入力されたパスワードが一致していない場合、このメソッドを終了する","      return unless customer.valid_password?(params[:customer][:password])","      # 【処理内容4】 アクティブでない会員に対する処理","      if customer.is_active == false","        redirect_to new_customer_registration_path","      end","    end","","    def configure_permitted_parameters","      devise_parameter_sanitizer.permit(:sign_up, keys: [","        :first_name, :last_name, :first_name_kana, :last_name_kana,","        :postal_code, :address, :telephone_number, :email, :password, :password_confirmation","      ])","    end","  end","end",""],"id":18}],[{"start":{"row":0,"column":0},"end":{"row":54,"column":6},"action":"insert","lines":["# frozen_string_literal: true","","class Public::SessionsController < Devise::SessionsController","  before_action :configure_permitted_parameters, if: :devise_controller?","  before_action :customer_state, only: [:create]","  # before_action :configure_sign_in_params, only: [:create]","","  # GET /resource/sign_in","  def new","    super","  end","","  # POST /resource/sign_in","  def create","    super","  end","","  # DELETE /resource/sign_out","  def destroy","    super","  end","","  protected","  ","  def after_sign_in_path_for(resource)","    my_page_customer_path","  end","  ","  def after_sign_out_path_for(resource)","    root_path","  end","  ","  private","  # アクティブであるかを判断するメソッド","  def customer_state","  # 【処理内容1】 入力されたemailからアカウントを1件取得","  customer = Customer.find_by(email: params[:customer][:email])","  # 【処理内容2】 アカウントを取得できなかった場合、このメソッドを終了する","  return if customer.nil?","  # 【処理内容3】 取得したアカウントのパスワードと入力されたパスワードが一致していない場合、このメソッドを終了する","  return unless customer.valid_password?(params[:customer][:password])","  # 【処理内容4】 アクティブでない会員に対する処理","  return unless customer.is_active == false","  redirect_to new_customer_registration_path","  end","  ","  protected ","  ","    def configure_permitted_parameters","    devise_parameter_sanitizer.permit(:sign_up, keys: [","      :first_name, :last_name, :first_name_kana, :last_name_kana, ","      :postal_code, :address, :telephone_number, :email, :password, :password_confirmation","    ])","    end","end   "],"id":19}],[{"start":{"row":23,"column":0},"end":{"row":23,"column":2},"action":"remove","lines":["  "],"id":20},{"start":{"row":27,"column":0},"end":{"row":27,"column":2},"action":"remove","lines":["  "]},{"start":{"row":31,"column":0},"end":{"row":31,"column":2},"action":"remove","lines":["  "]},{"start":{"row":45,"column":0},"end":{"row":45,"column":2},"action":"remove","lines":["  "]},{"start":{"row":46,"column":11},"end":{"row":46,"column":12},"action":"remove","lines":[" "]},{"start":{"row":47,"column":0},"end":{"row":47,"column":2},"action":"remove","lines":["  "]},{"start":{"row":50,"column":65},"end":{"row":50,"column":66},"action":"remove","lines":[" "]},{"start":{"row":54,"column":3},"end":{"row":54,"column":6},"action":"remove","lines":["   "]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":54,"column":3},"end":{"row":54,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1716771910805,"hash":"fd93b405c9b5f33b50f9e0544b9729b7260bd28b"}